// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/CLionSourceCodeAccessPrivatePCH.h"
#include "GeneratedCppIncludes.h"
#include "CLionSourceCodeAccess.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1CLionSourceCodeAccess() {}
	void UCLionSettings::StaticRegisterNativesUCLionSettings()
	{
	}
	IMPLEMENT_CLASS(UCLionSettings, 4021276898);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FFilePath();

	CLIONSOURCECODEACCESS_API class UClass* Z_Construct_UClass_UCLionSettings_NoRegister();
	CLIONSOURCECODEACCESS_API class UClass* Z_Construct_UClass_UCLionSettings();
	CLIONSOURCECODEACCESS_API class UPackage* Z_Construct_UPackage__Script_CLionSourceCodeAccess();
	UClass* Z_Construct_UClass_UCLionSettings_NoRegister()
	{
		return UCLionSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UCLionSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_CLionSourceCodeAccess();
			OuterClass = UCLionSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Mono = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Mono"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Mono, UCLionSettings), 0x0010000000004001, Z_Construct_UScriptStruct_FFilePath());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIncludeShaders, UCLionSettings, bool);
				UProperty* NewProp_bIncludeShaders = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIncludeShaders"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIncludeShaders, UCLionSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(bIncludeShaders, UCLionSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIncludePlugins, UCLionSettings, bool);
				UProperty* NewProp_bIncludePlugins = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIncludePlugins"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIncludePlugins, UCLionSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(bIncludePlugins, UCLionSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIncludeConfigs, UCLionSettings, bool);
				UProperty* NewProp_bIncludeConfigs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIncludeConfigs"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIncludeConfigs, UCLionSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(bIncludeConfigs, UCLionSettings), sizeof(bool), true);
				UProperty* NewProp_CXXCompiler = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CXXCompiler"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CXXCompiler, UCLionSettings), 0x0010000000004001, Z_Construct_UScriptStruct_FFilePath());
				UProperty* NewProp_CLion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CLion"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CLion, UCLionSettings), 0x0010000000004001, Z_Construct_UScriptStruct_FFilePath());
				UProperty* NewProp_CCompiler = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CCompiler"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CCompiler, UCLionSettings), 0x0010000000004001, Z_Construct_UScriptStruct_FFilePath());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("EditorUserSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("CLionSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/CLionSettings.h"));
				MetaData->SetValue(NewProp_Mono, TEXT("Category"), TEXT("Unreal"));
				MetaData->SetValue(NewProp_Mono, TEXT("DisplayName"), TEXT("Mono Executable"));
				MetaData->SetValue(NewProp_Mono, TEXT("ModuleRelativePath"), TEXT("Private/CLionSettings.h"));
				MetaData->SetValue(NewProp_Mono, TEXT("ToolTip"), TEXT("Path to the Mono executable."));
				MetaData->SetValue(NewProp_bIncludeShaders, TEXT("Category"), TEXT("CMakeList"));
				MetaData->SetValue(NewProp_bIncludeShaders, TEXT("DisplayName"), TEXT("Include Shaders"));
				MetaData->SetValue(NewProp_bIncludeShaders, TEXT("ModuleRelativePath"), TEXT("Private/CLionSettings.h"));
				MetaData->SetValue(NewProp_bIncludeShaders, TEXT("ToolTip"), TEXT("Include Shaders In Makefile"));
				MetaData->SetValue(NewProp_bIncludePlugins, TEXT("Category"), TEXT("CMakeList"));
				MetaData->SetValue(NewProp_bIncludePlugins, TEXT("DisplayName"), TEXT("Include Plugins"));
				MetaData->SetValue(NewProp_bIncludePlugins, TEXT("ModuleRelativePath"), TEXT("Private/CLionSettings.h"));
				MetaData->SetValue(NewProp_bIncludePlugins, TEXT("ToolTip"), TEXT("Include Plugins In Makefile"));
				MetaData->SetValue(NewProp_bIncludeConfigs, TEXT("Category"), TEXT("CMakeList"));
				MetaData->SetValue(NewProp_bIncludeConfigs, TEXT("DisplayName"), TEXT("Include Configs"));
				MetaData->SetValue(NewProp_bIncludeConfigs, TEXT("ModuleRelativePath"), TEXT("Private/CLionSettings.h"));
				MetaData->SetValue(NewProp_bIncludeConfigs, TEXT("ToolTip"), TEXT("Include Config In Makefile"));
				MetaData->SetValue(NewProp_CXXCompiler, TEXT("Category"), TEXT("CMakeList"));
				MetaData->SetValue(NewProp_CXXCompiler, TEXT("DisplayName"), TEXT("C++ Compiler (Optional)"));
				MetaData->SetValue(NewProp_CXXCompiler, TEXT("ModuleRelativePath"), TEXT("Private/CLionSettings.h"));
				MetaData->SetValue(NewProp_CXXCompiler, TEXT("ToolTip"), TEXT("[optional] Path to a C++ compiler to be used in the CMakeList file.\""));
				MetaData->SetValue(NewProp_CLion, TEXT("Category"), TEXT("CLion"));
				MetaData->SetValue(NewProp_CLion, TEXT("DisplayName"), TEXT("CLion Executable"));
				MetaData->SetValue(NewProp_CLion, TEXT("ModuleRelativePath"), TEXT("Private/CLionSettings.h"));
				MetaData->SetValue(NewProp_CLion, TEXT("ToolTip"), TEXT("Path to CLion executable, used when needing to launch CLion."));
				MetaData->SetValue(NewProp_CCompiler, TEXT("Category"), TEXT("CMakeList"));
				MetaData->SetValue(NewProp_CCompiler, TEXT("DisplayName"), TEXT("C Compiler (Optional)"));
				MetaData->SetValue(NewProp_CCompiler, TEXT("ModuleRelativePath"), TEXT("Private/CLionSettings.h"));
				MetaData->SetValue(NewProp_CCompiler, TEXT("ToolTip"), TEXT("[optional] Path to a C compiler to be used in the CMakeList file."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCLionSettings(Z_Construct_UClass_UCLionSettings, &UCLionSettings::StaticClass, TEXT("UCLionSettings"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCLionSettings);
	UPackage* Z_Construct_UPackage__Script_CLionSourceCodeAccess()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/CLionSourceCodeAccess")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000080);
			FGuid Guid;
			Guid.A = 0x92D9D6FF;
			Guid.B = 0x62B2C54E;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
